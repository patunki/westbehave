using Godot;
using Godot.NativeInterop;
using System;
using System.Collections.Generic;
using System.IO;

public partial class InventorySlot : Panel
{

    public TextureRect itemTexture;
    public InventoryClass playerInventory;
    public Variant origInvSlot;
    

    public Variant MakeData(){
        
        String slotName = this.Name;
        char lastChar = slotName[slotName.Length - 1];
        int lastNum = lastChar - '0';

        return lastNum;
    }
   
    public override Variant _GetDragData(Vector2 atPosition)
    {   
        var data = MakeData();
        if (data.Equals != null){
            return data;
        }
        else {
            GD.Print("vittu son vitun null");
            return 0;
        }
        
    }

    public override bool _CanDropData(Vector2 atPosition, Variant data)
    {
        
        return true;
        
       
    }

    public override void _DropData(Vector2 atPosition, Variant data)
    {   
        ItemClass dropItem = playerInventory.InventoryItems[(int)data];
        GD.Print(dropItem.ITEM_NAME);
        Update(dropItem);
        
    }

    

    public override void _Ready(){
        itemTexture = GetNode<TextureRect>("ItemTexture");
        playerInventory = (InventoryClass)ResourceLoader.Load("res://Player/PlayerInventory.tres");
        

    }

    public void Update(ItemClass item){
        if (item != null){
            itemTexture.Texture = item.ITEM_TEXTURE;
            
            
        }
    }




}

    public void UpdateInventory(){
        for (int i = 0; i < inventorySlot.Count(); i++){
            inventorySlot[i].Call("Update", playerInventory.InventoryItems[i],i);
        }
    }
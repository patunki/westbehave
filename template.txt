
    ----------------------------------------------------------------------
        INTERACTABLE TEMPLATE
    ---------------------------------------------------------------------

    using Godot;
using System;

public partial class interact_test : CharacterBody2D
{

    InteractionArea interactionArea;

    public override void _Ready()
    {
        interactionArea = GetNode<InteractionArea>("InteractionArea");
        interactionArea.callable = Callable.From(() => interactionArea.Interact(this, "OnInteract"));

    }

    public void OnInteract(){
        QueueFree();
    }

}

-----------------------------------------------------------------------------
------------ kinda working drop logic --------------------------------------
----------------------------------------------------------------------------
		if (Input.IsActionJustPressed("drop")){
			int quant = playerInventory.InventoryItems[0].DecQuant();
			InventoryUi.UpdateInventory();
			PackedScene scene = GD.Load<PackedScene>("res://Scenes/CollectableItems/3_apple_collectable.tscn"); //VERY TEMP ONLY APPLE!
			var instance = scene.Instantiate();
			Node2D location = new Node2D();
			GetTree().Root.AddChild(location);
			location.AddChild(instance);
			location.Position = new Vector2(80,80);
		}

----------------------------------------------------------------------------------------
 if (quant <= 0){
            GD.Print("Cant add less than 1 items at a time");
            return false;
        }
        Item item = itemDatabase.itemDatabase[itemDatabase.GetItem(id)];
            if (item == null){
                GD.Print("no such item in database");
                return false;
            }
        int quantLeft = quant;
        int maxStack;
        if (item.IS_STACKABLE){
            maxStack = item.MAX_STACK;
            for (int i = 0; i < InventoryItems.Count;i++){
               if (quant == 0){
                break;
               }

               Item currentItem = InventoryItems[i];

               if (currentItem.ITEM_ID == item.ITEM_ID){
                    continue;
               }
               if (currentItem.ITEM_QUANTITY < currentItem.MAX_STACK){
                    int originalQuant = currentItem.ITEM_QUANTITY;
                    currentItem.ITEM_QUANTITY = Math.Min(originalQuant + quantLeft, maxStack);
                    quantLeft -= currentItem.ITEM_QUANTITY - originalQuant;
               }
               if (quantLeft == 0){
                return true;
               }
            }
        }
        else {
            maxStack = 1;
        }
        while (quantLeft > 0){
            Item newItem = item;
            newItem.ITEM_QUANTITY = Math.Min(quantLeft,maxStack);

            InventoryItems.Add(newItem);
            quantLeft -= newItem.ITEM_QUANTITY;

        }

        EmitSignal("inventoryChanged", this);
        return true;
    }

    public Variant GetItems(){
        return InventoryItems;
    }
    public Item GetItem(int index){
        return InventoryItems[index];
    }
    public void OnInventoryChanged(){
        EmitSignal("inventoryChanged", this);
    }
    public void SetItems(Variant newItems){

    }
    -----------------------------------------------------------
    GET MANAGER FROM RESOURCE!!!!!!!!!!!
    -------------------------------------------------------------
        var tree = (SceneTree)Engine.GetMainLoop();
        var itemDatabase = tree.Root.GetNode<ItemDatabase>("ItemDatabase");  
---------------------------------------------------------------------
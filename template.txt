
	----------------------------------------------------------------------
		INTERACTABLE TEMPLATE
	---------------------------------------------------------------------

	using Godot;
using System;

public partial class interact_test : CharacterBody2D
{

	InteractionArea interactionArea;

	public override void _Ready()
	{
		interactionArea = GetNode<InteractionArea>("InteractionArea");
		interactionArea.callable = Callable.From(() => interactionArea.Interact(this, "OnInteract"));

	}

	public void OnInteract(){
		QueueFree();
	}

}

-----------------------------------------------------------------------------
------------ kinda working drop logic --------------------------------------
----------------------------------------------------------------------------
		if (Input.IsActionJustPressed("drop")){
			int quant = playerInventory.InventoryItems[0].DecQuant();
			InventoryUi.UpdateInventory();
			PackedScene scene = GD.Load<PackedScene>("res://Scenes/CollectableItems/3_apple_collectable.tscn"); //VERY TEMP ONLY APPLE!
			var instance = scene.Instantiate();
			Node2D location = new Node2D();
			GetTree().Root.AddChild(location);
			location.AddChild(instance);
			location.Position = new Vector2(80,80);
		}

----------------------------------------------------------------------------------------
 if (quant <= 0){
			GD.Print("Cant add less than 1 items at a time");
			return false;
		}
		Item item = itemDatabase.itemDatabase[itemDatabase.GetItem(id)];
			if (item == null){
				GD.Print("no such item in database");
				return false;
			}
		int quantLeft = quant;
		int maxStack;
		if (item.IS_STACKABLE){
			maxStack = item.MAX_STACK;
			for (int i = 0; i < InventoryItems.Count;i++){
			   if (quant == 0){
				break;
			   }

			   Item currentItem = InventoryItems[i];

			   if (currentItem.ITEM_ID == item.ITEM_ID){
					continue;
			   }
			   if (currentItem.ITEM_QUANTITY < currentItem.MAX_STACK){
					int originalQuant = currentItem.ITEM_QUANTITY;
					currentItem.ITEM_QUANTITY = Math.Min(originalQuant + quantLeft, maxStack);
					quantLeft -= currentItem.ITEM_QUANTITY - originalQuant;
			   }
			   if (quantLeft == 0){
				return true;
			   }
			}
		}
		else {
			maxStack = 1;
		}
		while (quantLeft > 0){
			Item newItem = item;
			newItem.ITEM_QUANTITY = Math.Min(quantLeft,maxStack);

			InventoryItems.Add(newItem);
			quantLeft -= newItem.ITEM_QUANTITY;

		}

		EmitSignal("inventoryChanged", this);
		return true;
	}

	public Variant GetItems(){
		return InventoryItems;
	}
	public Item GetItem(int index){
		return InventoryItems[index];
	}
	public void OnInventoryChanged(){
		EmitSignal("inventoryChanged", this);
	}
	public void SetItems(Variant newItems){

	}
	-----------------------------------------------------------
	GET MANAGER FROM RESOURCE!!!!!!!!!!!
	-------------------------------------------------------------
		var tree = (SceneTree)Engine.GetMainLoop();
		var itemDatabase = tree.Root.GetNode<ItemDatabase>("ItemDatabase");  
---------------------------------------------------------------------

/////////////////////////////////////////////////////
OLD EQUIPITEM
//////////////////////////////////////////////////
	[Export]
	Item item;
	Inventory playerInventory;
	TextureRect textureRect;
	AnimationPlayer animationPlayer;
	Attack attack;
	Player _player;
	Marker2D barrel;
	Node2D radius;
	PackedScene bullet;
	Sprite2D anims;
	HungerComponent hungerComponent;
	GpuParticles2D shotParticlesRed;
	GpuParticles2D shotParticlesWhite;
	PointLight2D muzzleFlash;

	public override void _Ready() //kato voiko resurssiin pistää silleen että node.instantiate jolla istten on sen se scripti //kasvin istutus sen perustella mitä on kädessä;
	{   
		playerInventory = GD.Load<Inventory>("res://Player/PlayerInventory.tres");
		textureRect = GetNode<TextureRect>("TextureRect");
		animationPlayer = GetNode<AnimationPlayer>("AnimationPlayer");
		_player = (Player)GetParent();
		barrel = GetNode<Marker2D>("Radius/Barrel");
		radius = GetNode<Node2D>("Radius");
		bullet = GD.Load<PackedScene>("res://Scenes/Bullet.tscn");
		anims = GetNode<Sprite2D>("Anims");
		hungerComponent = GetNode<HungerComponent>("%HungerComponent");
		shotParticlesWhite = GetNode<GpuParticles2D>("Radius/ShotParticlesWhite");
		shotParticlesRed = GetNode<GpuParticles2D>("Radius/ShotParticlesRed");
		muzzleFlash = GetNode<PointLight2D>("Radius/MuzzleFlash");

	}

	public override void _PhysicsProcess(double delta)
	{
		if (playerInventory.InventoryItems[15] != null){
		   GetItem();
		}
		else {
			DiscardItem();
		}
		if (_player.heading == new Vector2(-1,0)){
			textureRect.Scale = new Vector2(-1,1);
			anims.Scale = new Vector2(-1,1);
		}
		if (_player.heading == new Vector2(1,0)){
			textureRect.Scale = new Vector2(1,1);
			anims.Scale = new Vector2(1,1);
		}

		radius.LookAt(GetGlobalMousePosition());
		
	}


	public override void _Input(InputEvent @event)
	{
		if (Input.IsActionJustPressed("interact")){
			if (item != null){
				OnItemInteract();
				
				if (item.ITEM_QUANTITY <= 0){
					
					item.ITEM_QUANTITY = 1;
					playerInventory.InventoryItems[15] = null;
					item = null;
					textureRect.Texture = null;
					
				}

				playerInventory.EmitSignal(nameof(Inventory.InventoryChanged));
			}
		}

		if (Input.IsActionJustPressed("drop") && item != null){
				
				PackedScene dropItem = GD.Load("res://Scenes/DroppedItem.tscn") as PackedScene;
				DroppedItem instance = (DroppedItem)dropItem.Instantiate();

				instance.item = item;
				instance.Position = GlobalPosition;
				GetParent().GetParent().GetParent().AddChild(instance);

				item.DecQuant();
				if (item.ITEM_QUANTITY <= 0){
					
					item.ITEM_QUANTITY = 1;
					playerInventory.InventoryItems[15] = null;
					item = null;
					textureRect.Texture = null;
					
				}
				
				playerInventory.EmitSignal(nameof(Inventory.InventoryChanged));
			
		}

	}



	void OnItemInteract(){
	   //ItemType itemType = item.ITEM_TYPE;
	   //string method = item.Action;
	   if (item.HasMethod("Plant")){
			item.Call("Plant",GlobalPosition);
	   }
	   if (item.HasMethod("Plough")){
			item.Call("Plough",GlobalPosition);
	   }
	   if (item.ITEM_TYPE == ItemType.FOOD){
			Food food = (Food)item;
			//hungerComponent.FoodAdd(food.Eat());
			hungerComponent.WaterAdd(food.Drink());
	   }
	   if (item.HasMethod("Water")){
			ToolWateringCan can = (ToolWateringCan)item;

			/*if (can.Water(GlobalPosition)){
				animationPlayer.Play("Water");
			}*/
	   }
	   if (item.HasMethod("Shoot")){
		
			Bullet instance = (Bullet)bullet.Instantiate();
			instance.Position = barrel.GlobalPosition;
			//instance.Velocity = GetGlobalMousePosition();
			GetParent().GetParent().AddChild(instance);
			shotParticlesRed.Emitting = true;
			shotParticlesWhite.Emitting = true;
			muzzleFlash.Show();
			Timer timer = new Timer();
			AddChild(timer);
			timer.Start(0.1);
			timer.Timeout += muzzleFlash.Hide;
			timer.Timeout += timer.QueueFree;

	   }
	   if (item is ToolAxe){
			ToolAxe axe = (ToolAxe)item;
			attack = axe.Attack();
			animationPlayer.Play("AxeHit");

	   }
	   

	}
	void _on_hit_area_entered(Area2D area){
		if (area is HurtBoxComponent){
			if (area.GetParent() is Tree){
				area.CallDeferred("Hit",attack);
			}
			else {
				area.CallDeferred("Damage",attack);
			}
		}

	}
	
	void GetItem(){
			item = playerInventory.InventoryItems[15];
			textureRect.Texture = item.ITEM_TEXTURE;
	}
	
	void DiscardItem(){
			item = null;
			textureRect.Texture = null;
	}

}
// ITEM USES

   /*void FOOD(){
	   Food foodItem = (Food)item;
	   GD.Print("Ate ",foodItem.ITEM_NAME, ". +",foodItem.HEALTH_RESTORED,"hp");
	   foodItem.DecQuant();
   }

	void ARMOR(){
		Item armorItem = (Item)item; //Make armor class!

   }

   void WEAPON(){
		Weapon weaponItem = (Weapon)item;
		GD.Print(weaponItem.ITEM_NAME);
   }

   void TOOL(){
		Tool toolItem = (Tool)item;
		GD.Print(toolItem.ITEM_NAME);
   }

   void CONSUBLE(){
		Item consumableItem = (Item)item; //Make consumable class!
		GD.Print(consumableItem.ITEM_NAME);
   }

   void MATERIAL(){
		Item materialItem = (Item)item; //Make material class!
		GD.Print(materialItem.ITEM_NAME);
   }

   void MISC(){
		Item miscItem = (Item)item; //Make material class!
		GD.Print(miscItem.ITEM_NAME);
   }

   void SEED(){
		Seed seedItem = (Seed)item;

		if (seedItem.HasMethod("Plant")){
			seedItem.Call("Plant",GlobalPosition);
		}
   }*/
			   /* DroppedItem droppedItem = new DroppedItem();
				droppedItem.item = item;
				InteractionArea interactionArea = new InteractionArea();
				CollisionShape2D coller = new CollisionShape2D();
				CircleShape2D circle = new CircleShape2D();
				interactionArea.Name = "InteractionArea";
				circle.Radius = 32;
				coller.Shape = circle;
				interactionArea.AddChild(coller);
				interactionArea.actionName = "TO COLLECT";
				Sprite2D sprite2D = new Sprite2D();
				sprite2D.Name = "ItemTexture";
				droppedItem.AddChild(interactionArea);
				droppedItem.AddChild(sprite2D);
				droppedItem.Position = GlobalPosition;
				GetParent().GetParent().GetParent().AddChild(droppedItem);*/



